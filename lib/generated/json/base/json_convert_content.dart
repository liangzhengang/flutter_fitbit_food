// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:fitbitter/src/data/food_resp_entity.dart';
import 'package:fitbitter/generated/json/food_resp_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case FoodRespEntity:
				return foodRespEntityFromJson(data as FoodRespEntity, json) as T;
			case FoodRespFoodLog:
				return foodRespFoodLogFromJson(data as FoodRespFoodLog, json) as T;
			case FoodRespFoodLogLoggedFood:
				return foodRespFoodLogLoggedFoodFromJson(data as FoodRespFoodLogLoggedFood, json) as T;
			case FoodRespFoodLogLoggedFoodUnit:
				return foodRespFoodLogLoggedFoodUnitFromJson(data as FoodRespFoodLogLoggedFoodUnit, json) as T;
			case FoodRespFoodLogNutritionalValues:
				return foodRespFoodLogNutritionalValuesFromJson(data as FoodRespFoodLogNutritionalValues, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case FoodRespEntity:
				return foodRespEntityToJson(data as FoodRespEntity);
			case FoodRespFoodLog:
				return foodRespFoodLogToJson(data as FoodRespFoodLog);
			case FoodRespFoodLogLoggedFood:
				return foodRespFoodLogLoggedFoodToJson(data as FoodRespFoodLogLoggedFood);
			case FoodRespFoodLogLoggedFoodUnit:
				return foodRespFoodLogLoggedFoodUnitToJson(data as FoodRespFoodLogLoggedFoodUnit);
			case FoodRespFoodLogNutritionalValues:
				return foodRespFoodLogNutritionalValuesToJson(data as FoodRespFoodLogNutritionalValues);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (FoodRespEntity).toString()){
			return FoodRespEntity().fromJson(json);
		}
		if(type == (FoodRespFoodLog).toString()){
			return FoodRespFoodLog().fromJson(json);
		}
		if(type == (FoodRespFoodLogLoggedFood).toString()){
			return FoodRespFoodLogLoggedFood().fromJson(json);
		}
		if(type == (FoodRespFoodLogLoggedFoodUnit).toString()){
			return FoodRespFoodLogLoggedFoodUnit().fromJson(json);
		}
		if(type == (FoodRespFoodLogNutritionalValues).toString()){
			return FoodRespFoodLogNutritionalValues().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<FoodRespEntity>[] is M){
			return data.map<FoodRespEntity>((e) => FoodRespEntity().fromJson(e)).toList() as M;
		}
		if(<FoodRespFoodLog>[] is M){
			return data.map<FoodRespFoodLog>((e) => FoodRespFoodLog().fromJson(e)).toList() as M;
		}
		if(<FoodRespFoodLogLoggedFood>[] is M){
			return data.map<FoodRespFoodLogLoggedFood>((e) => FoodRespFoodLogLoggedFood().fromJson(e)).toList() as M;
		}
		if(<FoodRespFoodLogLoggedFoodUnit>[] is M){
			return data.map<FoodRespFoodLogLoggedFoodUnit>((e) => FoodRespFoodLogLoggedFoodUnit().fromJson(e)).toList() as M;
		}
		if(<FoodRespFoodLogNutritionalValues>[] is M){
			return data.map<FoodRespFoodLogNutritionalValues>((e) => FoodRespFoodLogNutritionalValues().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}